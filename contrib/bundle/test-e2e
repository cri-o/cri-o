#!/usr/bin/env bash
set -euo pipefail

USE_CONMON=0

usage() {
    printf "Usage: %s [ --use-conmonrs ] [ -h ]\n\n" "$(basename "$0")"
    echo "Possible arguments:"
    printf "  --use-conmon\tUse conmon instead of conmon-rs\n"
    printf "  -h\t\t\tShow this help message\n"
}

parse_args() {
    for arg in "$@"; do
        shift
        case "$arg" in
        '--use-conmon') set -- "$@" '-c' ;;
        '--help') set -- "$@" '-h' ;;
        *) set -- "$@" "$arg" ;;
        esac
    done

    while getopts 'ch' OPTION; do
        case "$OPTION" in
        c)
            USE_CONMON=1
            ;;
        h)
            usage
            exit 0
            ;;
        ?)
            usage
            exit 1
            ;;
        esac
    done
}

curl_retry() {
    curl -sSfL --retry 5 --retry-delay 3 "$@"
}

parse_args "$@"

set --

# Check for root
if [[ $EUID -ne 0 ]]; then
    echo "Please run this script as root"
    exit 1
fi

# Bypass local DNS
ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf

# Prepare the system
apt-get remove \
    conmon \
    containernetworking-plugins \
    crun
rm -rf "$(command -v runc)"
ufw disable
ip6tables --list >/dev/null
iptables -F
sysctl -w net.ipv4.conf.all.route_localnet=1
sysctl -w net.ipv4.ip_forward=1
sysctl -w net.bridge.bridge-nf-call-iptables=1
sysctl -w fs.inotify.max_user_watches=1048576
iptables -t nat -I POSTROUTING -s 127.0.0.0/8 ! -d 127.0.0.0/8 -j MASQUERADE

# Assume we're running on this arch
ARCH=amd64

# Global vars to be used
# shellcheck source=vars
source "$(dirname "${BASH_SOURCE[0]}")"/vars

pushd "$ARCHIVE_PATH"

# Untar the bundle
tar xfvz "$ARCHIVE"
pushd cri-o

# Install and prepare config
./install

# Set runtime type based on selection
if [[ $USE_CONMON -eq 1 ]]; then
    echo "Using conmon instead of conmon-rs"
    sed 's;pod;oci;g' /etc/crio/crio.conf.d/10-crun.conf
    conmon --version
else
    conmonrs --version
fi

cat <<EOT >>/etc/crio/crio.conf.d/10-log-level.conf
[crio.runtime]
log_level = "debug"
EOT

crun --version

crio config
crio config --default

# Start CRI-O
systemctl daemon-reload
systemctl start crio || (journalctl -xeu crio.service && exit 1)
systemctl is-active --quiet crio && echo CRI-O is running
journalctl --no-pager -u crio

# Start Kubernetes
GOROOT="$(go env GOROOT)"
GOPATH="$HOME/go"
PATH="$GOROOT/bin:$PATH"
K8SPATH="$GOPATH/src/k8s.io"
mkdir -p "$K8SPATH"
pushd "$K8SPATH"
git clone --depth=1 https://github.com/kubernetes/kubernetes
pushd kubernetes

LATEST=$(curl_retry https://dl.k8s.io/ci/latest.txt)
echo "Using Kubernetes build $LATEST"

URL="https://dl.k8s.io/ci/$LATEST"
mkdir -p _output/bin

echo Downloading server binaries
curl_retry "$URL/kubernetes-server-linux-amd64.tar.gz" -o- | tar xfz -
cp kubernetes/server/bin/{kubectl,kube-apiserver,kube-controller-manager,kube-proxy,kube-scheduler,kubelet} \
    _output/bin

echo Downloading test binaries
curl_retry "$URL/kubernetes-test-linux-amd64.tar.gz" -o- | tar xfz -
cp kubernetes/test/bin/{ginkgo,e2e.test} _output/bin

export CONTAINER_RUNTIME=remote
export CGROUP_DRIVER=systemd
export CGROUP_ROOT=/
export KUBELET_FLAGS='--runtime-cgroups=/system.slice/crio.service'
export CONTAINER_RUNTIME_ENDPOINT=/var/run/crio/crio.sock
export ALLOW_PRIVILEGED=1

IP=$(ip route get 1.2.3.4 | cut -d ' ' -f7 | tr -d '[:space:]')
echo "Using IP: $IP"
export DNS_SERVER_IP=$IP
export API_HOST_IP=$IP

hack/install-etcd.sh
export PATH="$GOPATH/src/k8s.io/kubernetes/third_party/etcd:$PATH"

OUTPUT=$(mktemp)
hack/local-up-cluster.sh -O 2>&1 | tee "$OUTPUT" &
PID=$!

until grep -q "Local Kubernetes cluster is running" "$OUTPUT"; do
    echo Waiting for hack/local-up-cluster.sh
    if ! ps $PID >/dev/null; then
        exit 1
    fi
    sleep 5
done

echo Cluster is up and running

# Run the tests
export KUBERUN=/var/run/kubernetes
export KUBECONFIG=$KUBERUN/admin.kubeconfig
export PATH="$GOPATH/src/k8s.io/kubernetes/_output/local/bin/linux/amd64:$PATH"
export KUBE_MASTER_URL=$IP
export KUBE_MASTER_IP=$IP
export KUBE_MASTER=$IP

export GINKGO_PARALLEL_NODES=4
export GINKGO_PARALLEL=y

_output/bin/e2e.test --provider=local --host="https://$IP:6443" \
    --ginkgo.timeout=2h \
    --ginkgo.progress \
    --ginkgo.focus='\[NodeConformance|NodeFeature:.*\]' \
    --ginkgo.skip='\[Flaky|Slow|Serial|sig-network|NodeFeature:RuntimeHandler\]|exec hook properly'

# Validate that we were using conmonrs
if [[ $USE_CONMON -eq 0 ]]; then
    journalctl --no-pager -u crio | grep -qm1 "Using conmonrs version:"
fi
