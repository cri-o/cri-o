---
# vim-syntax: ansible

- hosts: '{{ subjects | default("all") }}'
  vars_files:
    - "{{ playbook_dir }}/vars.yml"
  environment: '{{ environment_variables }}'
  tasks:

    - name: Verify expectations
      assert:
        that:
          # Combined "is defined" and "isn't blank" check
          - 'artifacts | default("", True) | trim | length'
          - 'generated_artifacts | default("", True) | trim | length'
          - 'extra_artifact_filepaths is defined'
          - 'parsed_artifacts is defined'
          - 'canonical_junit is defined'
          - 'playbook_dir ~ "/../parse2junit.py" | is_file'

    - name: artifacts directory exists
      file:
          path: "{{ artifacts }}"
          state: directory

    - name: Extra artifacts are collected, except missing or with clashing filenames
      command: 'cp --no-clobber --verbose "{{ item }}" "{{ artifacts }}/"'
      ignore_errors: True
      with_items: '{{ extra_artifact_filepaths }}'

    - name: Generated artifacts directory exists
      file:
          path: "{{ artifacts }}/generated"
          state: directory

    - name: Generated artifacts are produced
      shell: '{{ item.value }} || true &> {{ item.key }}'
      args:
        chdir: "{{ artifacts }}/generated"
        creates: "{{ artifacts }}/generated/{{ item.key }}"
      ignore_errors: True
      with_dict: "{{ generated_artifacts }}"

    - name: Subject produces a single canonical jUnit file by combining parsed_artifacts
      script: '{{ playbook_dir }}/../parse2junit.py {{ parsed_artifacts | join(" ") }} "{{ canonical_junit }}"'
      args:
        chdir: "{{ artifacts }}"


- hosts: '{{ control_host | default("none") }}'
  vars_files:
    - "{{ playbook_dir }}/vars.yml"
  environment: '{{ environment_variables }}'
  tasks:

    - name: Verify expectations
      assert:
        that:
          # Combined "is defined" and "isn't blank" check
          - 'artifacts | default("", True) | trim | length'
          - 'canonical_junit is defined'
          - 'playbook_dir ~ "/../parse2junit.py" | is_file'

    - name: A subdirectory exists for this subject's artifacts
      file:
        path: "{{ collection_dirpath }}"
        state: directory

    - name: Artifacts are retrieved from subjects
      synchronize:
          archive: False  # Don't bother with permissions or times
          checksum: True  # Don't rely on date/time being in sync
          copy_links: True  # We want files, not links to files
          recursive: True
          mode: pull
          dest: '{{ collection_dirpath }}'
          src: '{{ artifacts }}'
          rsync_opts: '--ignore-missing-args'
      delegate_to: '{{ item }}'
      with_inventory_hostnames:
        - '{{ subjects | default("all:!localhost") }}'

    - name: The paths of canonical_junit files from all subjects are found
      find:
        paths:
            - '{{ collection_dirpath }}'
        patterns: "{{ canonical_junit | basename }}"
        recurse: True
      register: result

    - name: Found paths are joined together into a single string
      set_fact:
        result: '{{ result.files | map(attribute="path") | join(" ") }}'

    - name: The control host produces a top-level junit, combining all subject's canonical_junits
      script: '{{ playbook_dir }}/../parse2junit.py {{ result }} "./{{ canonical_junit | basename }}"'
      args:
        chdir: "{{ collection_dirpath }}"
      when: result | trim | length
