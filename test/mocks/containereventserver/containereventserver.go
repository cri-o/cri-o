// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/cri-api/pkg/apis/runtime/v1 (interfaces: RuntimeService_GetContainerEventsServer)

// Package containereventservermock is a generated GoMock package.
package containereventservermock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	metadata "google.golang.org/grpc/metadata"
	v1 "k8s.io/cri-api/pkg/apis/runtime/v1"
)

// MockRuntimeService_GetContainerEventsServer is a mock of RuntimeService_GetContainerEventsServer interface.
type MockRuntimeService_GetContainerEventsServer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeService_GetContainerEventsServerMockRecorder
}

// MockRuntimeService_GetContainerEventsServerMockRecorder is the mock recorder for MockRuntimeService_GetContainerEventsServer.
type MockRuntimeService_GetContainerEventsServerMockRecorder struct {
	mock *MockRuntimeService_GetContainerEventsServer
}

// NewMockRuntimeService_GetContainerEventsServer creates a new mock instance.
func NewMockRuntimeService_GetContainerEventsServer(ctrl *gomock.Controller) *MockRuntimeService_GetContainerEventsServer {
	mock := &MockRuntimeService_GetContainerEventsServer{ctrl: ctrl}
	mock.recorder = &MockRuntimeService_GetContainerEventsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeService_GetContainerEventsServer) EXPECT() *MockRuntimeService_GetContainerEventsServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) Send(arg0 *v1.ContainerEventResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockRuntimeService_GetContainerEventsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockRuntimeService_GetContainerEventsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRuntimeService_GetContainerEventsServer)(nil).SetTrailer), arg0)
}
