// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/internal/lib/sandbox (interfaces: NamespaceIface)

// Package sandboxmock is a generated GoMock package.
package sandboxmock

import (
	sandbox "github.com/cri-o/cri-o/internal/lib/sandbox"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockNamespaceIface is a mock of NamespaceIface interface
type MockNamespaceIface struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceIfaceMockRecorder
}

// MockNamespaceIfaceMockRecorder is the mock recorder for MockNamespaceIface
type MockNamespaceIfaceMockRecorder struct {
	mock *MockNamespaceIface
}

// NewMockNamespaceIface creates a new mock instance
func NewMockNamespaceIface(ctrl *gomock.Controller) *MockNamespaceIface {
	mock := &MockNamespaceIface{ctrl: ctrl}
	mock.recorder = &MockNamespaceIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceIface) EXPECT() *MockNamespaceIfaceMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockNamespaceIface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNamespaceIfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNamespaceIface)(nil).Close))
}

// Get mocks base method
func (m *MockNamespaceIface) Get() *sandbox.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(*sandbox.Namespace)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockNamespaceIfaceMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespaceIface)(nil).Get))
}

// Initialize mocks base method
func (m *MockNamespaceIface) Initialize(arg0 string) (sandbox.NamespaceIface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(sandbox.NamespaceIface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize
func (mr *MockNamespaceIfaceMockRecorder) Initialize(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockNamespaceIface)(nil).Initialize), arg0)
}

// Initialized mocks base method
func (m *MockNamespaceIface) Initialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Initialized indicates an expected call of Initialized
func (mr *MockNamespaceIfaceMockRecorder) Initialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialized", reflect.TypeOf((*MockNamespaceIface)(nil).Initialized))
}

// Remove mocks base method
func (m *MockNamespaceIface) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockNamespaceIfaceMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockNamespaceIface)(nil).Remove))
}

// SymlinkCreate mocks base method
func (m *MockNamespaceIface) SymlinkCreate(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SymlinkCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SymlinkCreate indicates an expected call of SymlinkCreate
func (mr *MockNamespaceIfaceMockRecorder) SymlinkCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SymlinkCreate", reflect.TypeOf((*MockNamespaceIface)(nil).SymlinkCreate), arg0)
}
