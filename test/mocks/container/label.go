// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/internal/factory/container (interfaces: Impl)

// Package container is a generated GoMock package.
package container

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImpl is a mock of Impl interface.
type MockImpl struct {
	ctrl     *gomock.Controller
	recorder *MockImplMockRecorder
}

// MockImplMockRecorder is the mock recorder for MockImpl.
type MockImplMockRecorder struct {
	mock *MockImpl
}

// NewMockImpl creates a new mock instance.
func NewMockImpl(ctrl *gomock.Controller) *MockImpl {
	mock := &MockImpl{ctrl: ctrl}
	mock.recorder = &MockImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpl) EXPECT() *MockImplMockRecorder {
	return m.recorder
}

// securityLabel mocks base method.
func (m *MockImpl) securityLabel(arg0, arg1 string, arg2, arg3 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "securityLabel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// securityLabel indicates an expected call of securityLabel.
func (mr *MockImplMockRecorder) securityLabel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "securityLabel", reflect.TypeOf((*MockImpl)(nil).securityLabel), arg0, arg1, arg2, arg3)
}
