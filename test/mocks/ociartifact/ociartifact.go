// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/internal/ociartifact (interfaces: Impl)
//
// Generated by this command:
//
//	mockgen -package ociartifactmock -destination ./test/mocks/ociartifact/ociartifact.go github.com/cri-o/cri-o/internal/ociartifact Impl
//

// Package ociartifactmock is a generated GoMock package.
package ociartifactmock

import (
	context "context"
	io "io"
	reflect "reflect"

	digest "github.com/opencontainers/go-digest"
	libimage "go.podman.io/common/libimage"
	reference "go.podman.io/image/v5/docker/reference"
	manifest "go.podman.io/image/v5/manifest"
	layout "go.podman.io/image/v5/oci/layout"
	types "go.podman.io/image/v5/types"
	gomock "go.uber.org/mock/gomock"
)

// MockImpl is a mock of Impl interface.
type MockImpl struct {
	ctrl     *gomock.Controller
	recorder *MockImplMockRecorder
	isgomock struct{}
}

// MockImplMockRecorder is the mock recorder for MockImpl.
type MockImplMockRecorder struct {
	mock *MockImpl
}

// NewMockImpl creates a new mock instance.
func NewMockImpl(ctrl *gomock.Controller) *MockImpl {
	mock := &MockImpl{ctrl: ctrl}
	mock.recorder = &MockImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpl) EXPECT() *MockImplMockRecorder {
	return m.recorder
}

// CandidatesForPotentiallyShortImageName mocks base method.
func (m *MockImpl) CandidatesForPotentiallyShortImageName(systemContext *types.SystemContext, imageName string) ([]reference.Named, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CandidatesForPotentiallyShortImageName", systemContext, imageName)
	ret0, _ := ret[0].([]reference.Named)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CandidatesForPotentiallyShortImageName indicates an expected call of CandidatesForPotentiallyShortImageName.
func (mr *MockImplMockRecorder) CandidatesForPotentiallyShortImageName(systemContext, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CandidatesForPotentiallyShortImageName", reflect.TypeOf((*MockImpl)(nil).CandidatesForPotentiallyShortImageName), systemContext, imageName)
}

// ChooseInstance mocks base method.
func (m *MockImpl) ChooseInstance(arg0 manifest.List, arg1 *types.SystemContext) (digest.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChooseInstance", arg0, arg1)
	ret0, _ := ret[0].(digest.Digest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChooseInstance indicates an expected call of ChooseInstance.
func (mr *MockImplMockRecorder) ChooseInstance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChooseInstance", reflect.TypeOf((*MockImpl)(nil).ChooseInstance), arg0, arg1)
}

// CloseCopier mocks base method.
func (m *MockImpl) CloseCopier(arg0 *libimage.Copier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseCopier", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseCopier indicates an expected call of CloseCopier.
func (mr *MockImplMockRecorder) CloseCopier(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseCopier", reflect.TypeOf((*MockImpl)(nil).CloseCopier), arg0)
}

// CloseImageSource mocks base method.
func (m *MockImpl) CloseImageSource(arg0 types.ImageSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseImageSource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseImageSource indicates an expected call of CloseImageSource.
func (mr *MockImplMockRecorder) CloseImageSource(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseImageSource", reflect.TypeOf((*MockImpl)(nil).CloseImageSource), arg0)
}

// Copy mocks base method.
func (m *MockImpl) Copy(arg0 context.Context, arg1 *libimage.Copier, arg2, arg3 types.ImageReference) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockImplMockRecorder) Copy(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockImpl)(nil).Copy), arg0, arg1, arg2, arg3)
}

// DeleteImage mocks base method.
func (m *MockImpl) DeleteImage(arg0 context.Context, arg1 types.ImageReference, arg2 *types.SystemContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImplMockRecorder) DeleteImage(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImpl)(nil).DeleteImage), arg0, arg1, arg2)
}

// DockerNewReference mocks base method.
func (m *MockImpl) DockerNewReference(arg0 reference.Named) (types.ImageReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerNewReference", arg0)
	ret0, _ := ret[0].(types.ImageReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DockerNewReference indicates an expected call of DockerNewReference.
func (mr *MockImplMockRecorder) DockerNewReference(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerNewReference", reflect.TypeOf((*MockImpl)(nil).DockerNewReference), arg0)
}

// DockerReferenceName mocks base method.
func (m *MockImpl) DockerReferenceName(arg0 types.ImageReference) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerReferenceName", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DockerReferenceName indicates an expected call of DockerReferenceName.
func (mr *MockImplMockRecorder) DockerReferenceName(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerReferenceName", reflect.TypeOf((*MockImpl)(nil).DockerReferenceName), arg0)
}

// DockerReferenceString mocks base method.
func (m *MockImpl) DockerReferenceString(arg0 types.ImageReference) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DockerReferenceString", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// DockerReferenceString indicates an expected call of DockerReferenceString.
func (mr *MockImplMockRecorder) DockerReferenceString(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DockerReferenceString", reflect.TypeOf((*MockImpl)(nil).DockerReferenceString), arg0)
}

// GetBlob mocks base method.
func (m *MockImpl) GetBlob(arg0 context.Context, arg1 types.ImageSource, arg2 types.BlobInfo, arg3 types.BlobInfoCache) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlob", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBlob indicates an expected call of GetBlob.
func (mr *MockImplMockRecorder) GetBlob(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlob", reflect.TypeOf((*MockImpl)(nil).GetBlob), arg0, arg1, arg2, arg3)
}

// GetManifest mocks base method.
func (m *MockImpl) GetManifest(arg0 context.Context, arg1 types.ImageSource, arg2 *digest.Digest) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManifest", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetManifest indicates an expected call of GetManifest.
func (mr *MockImplMockRecorder) GetManifest(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManifest", reflect.TypeOf((*MockImpl)(nil).GetManifest), arg0, arg1, arg2)
}

// LayerInfos mocks base method.
func (m *MockImpl) LayerInfos(arg0 manifest.Manifest) []manifest.LayerInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayerInfos", arg0)
	ret0, _ := ret[0].([]manifest.LayerInfo)
	return ret0
}

// LayerInfos indicates an expected call of LayerInfos.
func (mr *MockImplMockRecorder) LayerInfos(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayerInfos", reflect.TypeOf((*MockImpl)(nil).LayerInfos), arg0)
}

// LayoutNewReference mocks base method.
func (m *MockImpl) LayoutNewReference(arg0, arg1 string) (types.ImageReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LayoutNewReference", arg0, arg1)
	ret0, _ := ret[0].(types.ImageReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LayoutNewReference indicates an expected call of LayoutNewReference.
func (mr *MockImplMockRecorder) LayoutNewReference(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LayoutNewReference", reflect.TypeOf((*MockImpl)(nil).LayoutNewReference), arg0, arg1)
}

// List mocks base method.
func (m *MockImpl) List(arg0 string) ([]layout.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]layout.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockImplMockRecorder) List(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImpl)(nil).List), arg0)
}

// ListFromBlob mocks base method.
func (m *MockImpl) ListFromBlob(arg0 []byte, arg1 string) (manifest.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFromBlob", arg0, arg1)
	ret0, _ := ret[0].(manifest.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFromBlob indicates an expected call of ListFromBlob.
func (mr *MockImplMockRecorder) ListFromBlob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFromBlob", reflect.TypeOf((*MockImpl)(nil).ListFromBlob), arg0, arg1)
}

// ManifestConfigMediaType mocks base method.
func (m *MockImpl) ManifestConfigMediaType(arg0 manifest.Manifest) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManifestConfigMediaType", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// ManifestConfigMediaType indicates an expected call of ManifestConfigMediaType.
func (mr *MockImplMockRecorder) ManifestConfigMediaType(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManifestConfigMediaType", reflect.TypeOf((*MockImpl)(nil).ManifestConfigMediaType), arg0)
}

// ManifestFromBlob mocks base method.
func (m *MockImpl) ManifestFromBlob(arg0 []byte, arg1 string) (manifest.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManifestFromBlob", arg0, arg1)
	ret0, _ := ret[0].(manifest.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ManifestFromBlob indicates an expected call of ManifestFromBlob.
func (mr *MockImplMockRecorder) ManifestFromBlob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManifestFromBlob", reflect.TypeOf((*MockImpl)(nil).ManifestFromBlob), arg0, arg1)
}

// NewCopier mocks base method.
func (m *MockImpl) NewCopier(arg0 *libimage.CopyOptions, arg1 *types.SystemContext) (*libimage.Copier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCopier", arg0, arg1)
	ret0, _ := ret[0].(*libimage.Copier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCopier indicates an expected call of NewCopier.
func (mr *MockImplMockRecorder) NewCopier(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCopier", reflect.TypeOf((*MockImpl)(nil).NewCopier), arg0, arg1)
}

// NewImageSource mocks base method.
func (m *MockImpl) NewImageSource(arg0 context.Context, arg1 types.ImageReference, arg2 *types.SystemContext) (types.ImageSource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewImageSource", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ImageSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewImageSource indicates an expected call of NewImageSource.
func (mr *MockImplMockRecorder) NewImageSource(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewImageSource", reflect.TypeOf((*MockImpl)(nil).NewImageSource), arg0, arg1, arg2)
}

// OCI1FromManifest mocks base method.
func (m *MockImpl) OCI1FromManifest(arg0 []byte) (*manifest.OCI1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OCI1FromManifest", arg0)
	ret0, _ := ret[0].(*manifest.OCI1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OCI1FromManifest indicates an expected call of OCI1FromManifest.
func (mr *MockImplMockRecorder) OCI1FromManifest(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OCI1FromManifest", reflect.TypeOf((*MockImpl)(nil).OCI1FromManifest), arg0)
}

// ParseNormalizedNamed mocks base method.
func (m *MockImpl) ParseNormalizedNamed(arg0 string) (reference.Named, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseNormalizedNamed", arg0)
	ret0, _ := ret[0].(reference.Named)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseNormalizedNamed indicates an expected call of ParseNormalizedNamed.
func (mr *MockImplMockRecorder) ParseNormalizedNamed(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseNormalizedNamed", reflect.TypeOf((*MockImpl)(nil).ParseNormalizedNamed), arg0)
}

// ReadAll mocks base method.
func (m *MockImpl) ReadAll(arg0 io.Reader) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAll", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAll indicates an expected call of ReadAll.
func (mr *MockImplMockRecorder) ReadAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAll", reflect.TypeOf((*MockImpl)(nil).ReadAll), arg0)
}

// ToJSON mocks base method.
func (m *MockImpl) ToJSON(arg0 any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToJSON", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToJSON indicates an expected call of ToJSON.
func (mr *MockImplMockRecorder) ToJSON(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToJSON", reflect.TypeOf((*MockImpl)(nil).ToJSON), arg0)
}
