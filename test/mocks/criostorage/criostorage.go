// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/internal/storage (interfaces: ImageServer,RuntimeServer,MultiStoreServer,MultiStore)

// Package criostoragemock is a generated GoMock package.
package criostoragemock

import (
	reflect "reflect"

	types "github.com/containers/image/v5/types"
	storage "github.com/containers/storage"
	types0 "github.com/containers/storage/types"
	storage0 "github.com/cri-o/cri-o/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockImageServer is a mock of ImageServer interface.
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer.
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance.
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// GetStore mocks base method.
func (m *MockImageServer) GetStore() storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(storage.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockImageServerMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockImageServer)(nil).GetStore))
}

// ImageStatus mocks base method.
func (m *MockImageServer) ImageStatus(arg0 *types.SystemContext, arg1 string) (*storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageStatus indicates an expected call of ImageStatus.
func (mr *MockImageServerMockRecorder) ImageStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageStatus", reflect.TypeOf((*MockImageServer)(nil).ImageStatus), arg0, arg1)
}

// ListImages mocks base method.
func (m *MockImageServer) ListImages(arg0 *types.SystemContext, arg1 string) ([]storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", arg0, arg1)
	ret0, _ := ret[0].([]storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockImageServerMockRecorder) ListImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockImageServer)(nil).ListImages), arg0, arg1)
}

// PrepareImage mocks base method.
func (m *MockImageServer) PrepareImage(arg0 *types.SystemContext, arg1 string) (types.ImageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareImage", arg0, arg1)
	ret0, _ := ret[0].(types.ImageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareImage indicates an expected call of PrepareImage.
func (mr *MockImageServerMockRecorder) PrepareImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareImage", reflect.TypeOf((*MockImageServer)(nil).PrepareImage), arg0, arg1)
}

// PullImage mocks base method.
func (m *MockImageServer) PullImage(arg0 *types.SystemContext, arg1 string, arg2 *storage0.ImageCopyOptions) (types.ImageReference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", arg0, arg1, arg2)
	ret0, _ := ret[0].(types.ImageReference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullImage indicates an expected call of PullImage.
func (mr *MockImageServerMockRecorder) PullImage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockImageServer)(nil).PullImage), arg0, arg1, arg2)
}

// ResolveNames mocks base method.
func (m *MockImageServer) ResolveNames(arg0 *types.SystemContext, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNames indicates an expected call of ResolveNames.
func (mr *MockImageServerMockRecorder) ResolveNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNames", reflect.TypeOf((*MockImageServer)(nil).ResolveNames), arg0, arg1)
}

// UntagImage mocks base method.
func (m *MockImageServer) UntagImage(arg0 *types.SystemContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagImage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UntagImage indicates an expected call of UntagImage.
func (mr *MockImageServerMockRecorder) UntagImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagImage", reflect.TypeOf((*MockImageServer)(nil).UntagImage), arg0, arg1)
}

// MockRuntimeServer is a mock of RuntimeServer interface.
type MockRuntimeServer struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimeServerMockRecorder
}

// MockRuntimeServerMockRecorder is the mock recorder for MockRuntimeServer.
type MockRuntimeServerMockRecorder struct {
	mock *MockRuntimeServer
}

// NewMockRuntimeServer creates a new mock instance.
func NewMockRuntimeServer(ctrl *gomock.Controller) *MockRuntimeServer {
	mock := &MockRuntimeServer{ctrl: ctrl}
	mock.recorder = &MockRuntimeServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuntimeServer) EXPECT() *MockRuntimeServerMockRecorder {
	return m.recorder
}

// CreateContainer mocks base method.
func (m *MockRuntimeServer) CreateContainer(arg0 *types.SystemContext, arg1, arg2, arg3, arg4, arg5, arg6, arg7 string, arg8 uint32, arg9 *types0.IDMappingOptions, arg10 []string, arg11 bool, arg12 string) (storage0.ContainerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
	ret0, _ := ret[0].(storage0.ContainerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockRuntimeServerMockRecorder) CreateContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockRuntimeServer)(nil).CreateContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
}

// CreatePodSandbox mocks base method.
func (m *MockRuntimeServer) CreatePodSandbox(arg0 *types.SystemContext, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 string, arg10 uint32, arg11 *types0.IDMappingOptions, arg12 []string, arg13 bool, arg14 string) (storage0.ContainerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePodSandbox", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
	ret0, _ := ret[0].(storage0.ContainerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePodSandbox indicates an expected call of CreatePodSandbox.
func (mr *MockRuntimeServerMockRecorder) CreatePodSandbox(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePodSandbox", reflect.TypeOf((*MockRuntimeServer)(nil).CreatePodSandbox), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14)
}

// DeleteContainer mocks base method.
func (m *MockRuntimeServer) DeleteContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockRuntimeServerMockRecorder) DeleteContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockRuntimeServer)(nil).DeleteContainer), arg0)
}

// GetContainerMetadata mocks base method.
func (m *MockRuntimeServer) GetContainerMetadata(arg0 string) (storage0.RuntimeContainerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", arg0)
	ret0, _ := ret[0].(storage0.RuntimeContainerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata.
func (mr *MockRuntimeServerMockRecorder) GetContainerMetadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockRuntimeServer)(nil).GetContainerMetadata), arg0)
}

// GetRunDir mocks base method.
func (m *MockRuntimeServer) GetRunDir(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunDir", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunDir indicates an expected call of GetRunDir.
func (mr *MockRuntimeServerMockRecorder) GetRunDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunDir", reflect.TypeOf((*MockRuntimeServer)(nil).GetRunDir), arg0)
}

// GetWorkDir mocks base method.
func (m *MockRuntimeServer) GetWorkDir(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkDir", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkDir indicates an expected call of GetWorkDir.
func (mr *MockRuntimeServerMockRecorder) GetWorkDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkDir", reflect.TypeOf((*MockRuntimeServer)(nil).GetWorkDir), arg0)
}

// SetContainerMetadata mocks base method.
func (m *MockRuntimeServer) SetContainerMetadata(arg0 string, arg1 *storage0.RuntimeContainerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata.
func (mr *MockRuntimeServerMockRecorder) SetContainerMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockRuntimeServer)(nil).SetContainerMetadata), arg0, arg1)
}

// StartContainer mocks base method.
func (m *MockRuntimeServer) StartContainer(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartContainer", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartContainer indicates an expected call of StartContainer.
func (mr *MockRuntimeServerMockRecorder) StartContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartContainer", reflect.TypeOf((*MockRuntimeServer)(nil).StartContainer), arg0)
}

// StopContainer mocks base method.
func (m *MockRuntimeServer) StopContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopContainer indicates an expected call of StopContainer.
func (mr *MockRuntimeServerMockRecorder) StopContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopContainer", reflect.TypeOf((*MockRuntimeServer)(nil).StopContainer), arg0)
}

// MockMultiStoreServer is a mock of MultiStoreServer interface.
type MockMultiStoreServer struct {
	ctrl     *gomock.Controller
	recorder *MockMultiStoreServerMockRecorder
}

// MockMultiStoreServerMockRecorder is the mock recorder for MockMultiStoreServer.
type MockMultiStoreServerMockRecorder struct {
	mock *MockMultiStoreServer
}

// NewMockMultiStoreServer creates a new mock instance.
func NewMockMultiStoreServer(ctrl *gomock.Controller) *MockMultiStoreServer {
	mock := &MockMultiStoreServer{ctrl: ctrl}
	mock.recorder = &MockMultiStoreServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiStoreServer) EXPECT() *MockMultiStoreServerMockRecorder {
	return m.recorder
}

// ContainerDirectory mocks base method.
func (m *MockMultiStoreServer) ContainerDirectory(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerDirectory", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerDirectory indicates an expected call of ContainerDirectory.
func (mr *MockMultiStoreServerMockRecorder) ContainerDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerDirectory", reflect.TypeOf((*MockMultiStoreServer)(nil).ContainerDirectory), arg0)
}

// ContainerRunDirectory mocks base method.
func (m *MockMultiStoreServer) ContainerRunDirectory(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerRunDirectory", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerRunDirectory indicates an expected call of ContainerRunDirectory.
func (mr *MockMultiStoreServerMockRecorder) ContainerRunDirectory(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerRunDirectory", reflect.TypeOf((*MockMultiStoreServer)(nil).ContainerRunDirectory), arg0)
}

// FromContainerDirectory mocks base method.
func (m *MockMultiStoreServer) FromContainerDirectory(arg0, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromContainerDirectory", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromContainerDirectory indicates an expected call of FromContainerDirectory.
func (mr *MockMultiStoreServerMockRecorder) FromContainerDirectory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromContainerDirectory", reflect.TypeOf((*MockMultiStoreServer)(nil).FromContainerDirectory), arg0, arg1)
}

// GetAllStores mocks base method.
func (m *MockMultiStoreServer) GetAllStores() []storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStores")
	ret0, _ := ret[0].([]storage.Store)
	return ret0
}

// GetAllStores indicates an expected call of GetAllStores.
func (mr *MockMultiStoreServerMockRecorder) GetAllStores() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStores", reflect.TypeOf((*MockMultiStoreServer)(nil).GetAllStores))
}

// GetDefaultStorage mocks base method.
func (m *MockMultiStoreServer) GetDefaultStorage() storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultStorage")
	ret0, _ := ret[0].(storage.Store)
	return ret0
}

// GetDefaultStorage indicates an expected call of GetDefaultStorage.
func (mr *MockMultiStoreServerMockRecorder) GetDefaultStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultStorage", reflect.TypeOf((*MockMultiStoreServer)(nil).GetDefaultStorage))
}

// GetImageServer mocks base method.
func (m *MockMultiStoreServer) GetImageServer(arg0 string) (storage0.ImageServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageServer", arg0)
	ret0, _ := ret[0].(storage0.ImageServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageServer indicates an expected call of GetImageServer.
func (mr *MockMultiStoreServerMockRecorder) GetImageServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageServer", reflect.TypeOf((*MockMultiStoreServer)(nil).GetImageServer), arg0)
}

// GetImageServerForImage mocks base method.
func (m *MockMultiStoreServer) GetImageServerForImage(arg0 string) ([]storage0.ImageServer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageServerForImage", arg0)
	ret0, _ := ret[0].([]storage0.ImageServer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageServerForImage indicates an expected call of GetImageServerForImage.
func (mr *MockMultiStoreServerMockRecorder) GetImageServerForImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageServerForImage", reflect.TypeOf((*MockMultiStoreServer)(nil).GetImageServerForImage), arg0)
}

// GetStore mocks base method.
func (m *MockMultiStoreServer) GetStore() storage0.MultiStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(storage0.MultiStore)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockMultiStoreServerMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockMultiStoreServer)(nil).GetStore))
}

// GetStoreForContainer mocks base method.
func (m *MockMultiStoreServer) GetStoreForContainer(arg0 string) (storage.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreForContainer", arg0)
	ret0, _ := ret[0].(storage.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreForContainer indicates an expected call of GetStoreForContainer.
func (mr *MockMultiStoreServerMockRecorder) GetStoreForContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreForContainer", reflect.TypeOf((*MockMultiStoreServer)(nil).GetStoreForContainer), arg0)
}

// GetStoreForImage mocks base method.
func (m *MockMultiStoreServer) GetStoreForImage(arg0 string) (storage.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreForImage", arg0)
	ret0, _ := ret[0].(storage.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreForImage indicates an expected call of GetStoreForImage.
func (mr *MockMultiStoreServerMockRecorder) GetStoreForImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreForImage", reflect.TypeOf((*MockMultiStoreServer)(nil).GetStoreForImage), arg0)
}

// GraphRoot mocks base method.
func (m *MockMultiStoreServer) GraphRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphRoot indicates an expected call of GraphRoot.
func (mr *MockMultiStoreServerMockRecorder) GraphRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphRoot", reflect.TypeOf((*MockMultiStoreServer)(nil).GraphRoot))
}

// ImageStatus mocks base method.
func (m *MockMultiStoreServer) ImageStatus(arg0 *types.SystemContext, arg1 string) (*storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageStatus", arg0, arg1)
	ret0, _ := ret[0].(*storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageStatus indicates an expected call of ImageStatus.
func (mr *MockMultiStoreServerMockRecorder) ImageStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageStatus", reflect.TypeOf((*MockMultiStoreServer)(nil).ImageStatus), arg0, arg1)
}

// ListAllImages mocks base method.
func (m *MockMultiStoreServer) ListAllImages(arg0 *types.SystemContext, arg1 string) ([]storage0.ImageResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllImages", arg0, arg1)
	ret0, _ := ret[0].([]storage0.ImageResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllImages indicates an expected call of ListAllImages.
func (mr *MockMultiStoreServerMockRecorder) ListAllImages(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllImages", reflect.TypeOf((*MockMultiStoreServer)(nil).ListAllImages), arg0, arg1)
}

// ResolveNames mocks base method.
func (m *MockMultiStoreServer) ResolveNames(arg0 *types.SystemContext, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveNames", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveNames indicates an expected call of ResolveNames.
func (mr *MockMultiStoreServerMockRecorder) ResolveNames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveNames", reflect.TypeOf((*MockMultiStoreServer)(nil).ResolveNames), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockMultiStoreServer) Shutdown(arg0 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockMultiStoreServerMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockMultiStoreServer)(nil).Shutdown), arg0)
}

// MockMultiStore is a mock of MultiStore interface.
type MockMultiStore struct {
	ctrl     *gomock.Controller
	recorder *MockMultiStoreMockRecorder
}

// MockMultiStoreMockRecorder is the mock recorder for MockMultiStore.
type MockMultiStoreMockRecorder struct {
	mock *MockMultiStore
}

// NewMockMultiStore creates a new mock instance.
func NewMockMultiStore(ctrl *gomock.Controller) *MockMultiStore {
	mock := &MockMultiStore{ctrl: ctrl}
	mock.recorder = &MockMultiStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiStore) EXPECT() *MockMultiStoreMockRecorder {
	return m.recorder
}

// Containers mocks base method.
func (m *MockMultiStore) Containers() ([]storage.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Containers")
	ret0, _ := ret[0].([]storage.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Containers indicates an expected call of Containers.
func (mr *MockMultiStoreMockRecorder) Containers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Containers", reflect.TypeOf((*MockMultiStore)(nil).Containers))
}

// DeleteContainer mocks base method.
func (m *MockMultiStore) DeleteContainer(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockMultiStoreMockRecorder) DeleteContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockMultiStore)(nil).DeleteContainer), arg0)
}

// DeleteImage mocks base method.
func (m *MockMultiStore) DeleteImage(arg0 string, arg1 bool) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockMultiStoreMockRecorder) DeleteImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockMultiStore)(nil).DeleteImage), arg0, arg1)
}

// GetDefaultStorage mocks base method.
func (m *MockMultiStore) GetDefaultStorage() storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultStorage")
	ret0, _ := ret[0].(storage.Store)
	return ret0
}

// GetDefaultStorage indicates an expected call of GetDefaultStorage.
func (mr *MockMultiStoreMockRecorder) GetDefaultStorage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultStorage", reflect.TypeOf((*MockMultiStore)(nil).GetDefaultStorage))
}

// GetDefaultStorageDriver mocks base method.
func (m *MockMultiStore) GetDefaultStorageDriver() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultStorageDriver")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultStorageDriver indicates an expected call of GetDefaultStorageDriver.
func (mr *MockMultiStoreMockRecorder) GetDefaultStorageDriver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultStorageDriver", reflect.TypeOf((*MockMultiStore)(nil).GetDefaultStorageDriver))
}

// GetStore mocks base method.
func (m *MockMultiStore) GetStore() map[string]storage.Store {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStore")
	ret0, _ := ret[0].(map[string]storage.Store)
	return ret0
}

// GetStore indicates an expected call of GetStore.
func (mr *MockMultiStoreMockRecorder) GetStore() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStore", reflect.TypeOf((*MockMultiStore)(nil).GetStore))
}

// GetStoreForContainer mocks base method.
func (m *MockMultiStore) GetStoreForContainer(arg0 string) (storage.Store, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoreForContainer", arg0)
	ret0, _ := ret[0].(storage.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoreForContainer indicates an expected call of GetStoreForContainer.
func (mr *MockMultiStoreMockRecorder) GetStoreForContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoreForContainer", reflect.TypeOf((*MockMultiStore)(nil).GetStoreForContainer), arg0)
}

// GraphDriverName mocks base method.
func (m *MockMultiStore) GraphDriverName() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphDriverName")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GraphDriverName indicates an expected call of GraphDriverName.
func (mr *MockMultiStoreMockRecorder) GraphDriverName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphDriverName", reflect.TypeOf((*MockMultiStore)(nil).GraphDriverName))
}

// GraphOptions mocks base method.
func (m *MockMultiStore) GraphOptions() map[string][]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphOptions")
	ret0, _ := ret[0].(map[string][]string)
	return ret0
}

// GraphOptions indicates an expected call of GraphOptions.
func (mr *MockMultiStoreMockRecorder) GraphOptions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphOptions", reflect.TypeOf((*MockMultiStore)(nil).GraphOptions))
}

// GraphRoot mocks base method.
func (m *MockMultiStore) GraphRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GraphRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// GraphRoot indicates an expected call of GraphRoot.
func (mr *MockMultiStoreMockRecorder) GraphRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GraphRoot", reflect.TypeOf((*MockMultiStore)(nil).GraphRoot))
}

// Metadata mocks base method.
func (m *MockMultiStore) Metadata(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Metadata", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata.
func (mr *MockMultiStoreMockRecorder) Metadata(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockMultiStore)(nil).Metadata), arg0)
}

// RunRoot mocks base method.
func (m *MockMultiStore) RunRoot() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRoot")
	ret0, _ := ret[0].(string)
	return ret0
}

// RunRoot indicates an expected call of RunRoot.
func (mr *MockMultiStoreMockRecorder) RunRoot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRoot", reflect.TypeOf((*MockMultiStore)(nil).RunRoot))
}

// Unmount mocks base method.
func (m *MockMultiStore) Unmount(arg0 string, arg1 bool) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmount", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unmount indicates an expected call of Unmount.
func (mr *MockMultiStoreMockRecorder) Unmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmount", reflect.TypeOf((*MockMultiStore)(nil).Unmount), arg0, arg1)
}
