// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cri-o/cri-o/server/metrics (interfaces: Impl)

// Package metricsmock is a generated GoMock package.
package metricsmock

import (
	tls "crypto/tls"
	net "net"
	http "net/http"
	reflect "reflect"

	fsnotify "github.com/fsnotify/fsnotify"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
)

// MockImpl is a mock of Impl interface.
type MockImpl struct {
	ctrl     *gomock.Controller
	recorder *MockImplMockRecorder
}

// MockImplMockRecorder is the mock recorder for MockImpl.
type MockImplMockRecorder struct {
	mock *MockImpl
}

// NewMockImpl creates a new mock instance.
func NewMockImpl(ctrl *gomock.Controller) *MockImpl {
	mock := &MockImpl{ctrl: ctrl}
	mock.recorder = &MockImplMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImpl) EXPECT() *MockImplMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockImpl) Add(arg0 *fsnotify.Watcher, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockImplMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockImpl)(nil).Add), arg0, arg1)
}

// Listen mocks base method.
func (m *MockImpl) Listen(arg0, arg1 string) (net.Listener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Listen", arg0, arg1)
	ret0, _ := ret[0].(net.Listener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Listen indicates an expected call of Listen.
func (mr *MockImplMockRecorder) Listen(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Listen", reflect.TypeOf((*MockImpl)(nil).Listen), arg0, arg1)
}

// LoadX509KeyPair mocks base method.
func (m *MockImpl) LoadX509KeyPair(arg0, arg1 string) (tls.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadX509KeyPair", arg0, arg1)
	ret0, _ := ret[0].(tls.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadX509KeyPair indicates an expected call of LoadX509KeyPair.
func (mr *MockImplMockRecorder) LoadX509KeyPair(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadX509KeyPair", reflect.TypeOf((*MockImpl)(nil).LoadX509KeyPair), arg0, arg1)
}

// NewWatcher mocks base method.
func (m *MockImpl) NewWatcher() (*fsnotify.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWatcher")
	ret0, _ := ret[0].(*fsnotify.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWatcher indicates an expected call of NewWatcher.
func (mr *MockImplMockRecorder) NewWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWatcher", reflect.TypeOf((*MockImpl)(nil).NewWatcher))
}

// Register mocks base method.
func (m *MockImpl) Register(arg0 prometheus.Collector) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockImplMockRecorder) Register(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockImpl)(nil).Register), arg0)
}

// RemoveUnusedSocket mocks base method.
func (m *MockImpl) RemoveUnusedSocket(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUnusedSocket", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUnusedSocket indicates an expected call of RemoveUnusedSocket.
func (mr *MockImplMockRecorder) RemoveUnusedSocket(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUnusedSocket", reflect.TypeOf((*MockImpl)(nil).RemoveUnusedSocket), arg0)
}

// Serve mocks base method.
func (m *MockImpl) Serve(arg0 net.Listener, arg1 http.Handler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockImplMockRecorder) Serve(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockImpl)(nil).Serve), arg0, arg1)
}

// ServeTLS mocks base method.
func (m *MockImpl) ServeTLS(arg0 *http.Server, arg1 net.Listener, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServeTLS", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServeTLS indicates an expected call of ServeTLS.
func (mr *MockImplMockRecorder) ServeTLS(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeTLS", reflect.TypeOf((*MockImpl)(nil).ServeTLS), arg0, arg1, arg2, arg3)
}
