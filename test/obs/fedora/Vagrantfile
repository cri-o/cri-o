# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrant box for testing
Vagrant.configure("2") do |config|
  config.vm.box = "fedora/38-cloud-base"
  memory = 8192
  cpus = 4

  config.vm.provider :virtualbox do |v|
    v.memory = memory
    v.cpus = cpus
  end

  config.vm.provider :libvirt do |v|
    v.memory = memory
    v.cpus = cpus
  end

  config.vm.synced_folder '.', '/vagrant', disabled: true

  config.vm.provision "install-dependencies", type: "shell", run: "once" do |sh|
    sh.inline = <<~SHELL
      set -euxo pipefail

      # Use a non-localhost DNS to avoid cluster DNS lookup loops
      echo "nameserver 8.8.8.8" > /etc/resolv.conf

      KUBERNETES_VERSION=v1.28
      cat <<EOF | tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/$KUBERNETES_VERSION/rpm/repodata/repomd.xml.key
EOF

      cat <<EOF | tee /etc/yum.repos.d/cri-o.repo
[cri-o]
name=CRI-O
baseurl=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main:/build/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main:/build/rpm/repodata/repomd.xml.key
EOF

      dnf install -y \
        cri-o \
        container-selinux \
        kubeadm \
        kubectl \
        kubelet \
        kubernetes-cni

      systemctl enable --now crio.service

      dnf remove -y \
        zram-generator-defaults

      hostnamectl set-hostname fedora

      # Configure system to work seamlessly on single node clusters
      modprobe br_netfilter
      ip6tables --list >/dev/null
      iptables -F
      sysctl -w net.ipv4.conf.all.route_localnet=1
      sysctl -w net.ipv4.ip_forward=1
      sysctl -w net.bridge.bridge-nf-call-iptables=1
      sysctl -w fs.inotify.max_user_watches=1048576
      iptables -t nat -I POSTROUTING -s 127.0.0.0/8 ! -d 127.0.0.0/8 -j MASQUERADE
      systemctl stop dev-zram0.swap
      swapoff -a

      # Cluster
      IP=`ip route get 1.2.3.4 | cut -d ' ' -f7 | tr -d '[:space:]'`
      NODENAME=$(hostname -s)
      kubeadm init --apiserver-cert-extra-sans=$IP --node-name $NODENAME

      # Check cluster
      export KUBECONFIG=/etc/kubernetes/admin.conf
      kubectl taint nodes --all node-role.kubernetes.io/control-plane-
      kubectl wait -n kube-system --timeout=180s --for=condition=available deploy coredns
      kubectl wait --timeout=180s --for=condition=ready pods --all -A
      kubectl get pods -A
      kubectl run -i --restart=Never --image debian --rm debian -- echo test | grep test
    SHELL
  end
end
